name: Main CI/CD

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Run tests
        run: go test -race ./...

  deploy:
    runs-on: self-hosted
    needs: test
    env:
      REPO_NAME: ${{ github.event.repository.name }}
    steps:
      - uses: actions/checkout@v3

      - name: Create/Update systemd service
        run: |
          SERVICE_FILE="/etc/systemd/system/${REPO_NAME}.service"
          TEMPLATE_FILE="$GITHUB_WORKSPACE/.github/deploy/systemd.service"
          envsubst < $TEMPLATE_FILE | sudo tee $SERVICE_FILE

          sudo systemctl daemon-reload
          sudo systemctl enable ${REPO_NAME}.service

      - name: Start/Restart systemd service
        run: |
          sudo systemctl restart ${REPO_NAME}.service

      - name: Wait for container to become healthy
        run: |
          TIMEOUT=60
          SLEEP_INTERVAL=1

          for i in $(seq 1 $TIMEOUT); do
            CONTAINER_NAME=$(docker compose -f $GITHUB_WORKSPACE/docker-compose.yml ps -q $REPO_NAME)
            if [ "$CONTAINER_NAME" != "" ]; then
              echo "Found container: $CONTAINER_NAME"
              break
            fi
            sleep $SLEEP_INTERVAL
          done

          if [ "$CONTAINER_NAME" = "" ]; then
            echo "Timed out while waiting for container to start"
            exit 1
          fi

          for i in $(seq 1 $TIMEOUT); do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME)
            if [ "$STATUS" = "healthy" ]; then
              echo "Container is healthy"
              break
            fi
            sleep $SLEEP_INTERVAL
          done

          if [ "$STATUS" != "healthy" ]; then
            echo "Timed out while waiting for container to become healthy"
            exit 1
          fi
